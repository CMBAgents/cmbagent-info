#!/usr/bin/env python3
"""
Script de test pour g√©n√©rer le contexte de pixell
en utilisant la nouvelle structure contextmaker.make()
"""

import os
import sys
import tempfile
import subprocess
import shutil
from pathlib import Path

def clone_pixell_repo():
    """Clone le repository pixell dans un dossier temporaire"""
    print("üîÑ Clonage du repository pixell...")
    
    # Cr√©er un dossier temporaire pour le clone
    temp_dir = Path("temp/repos/pixell")
    temp_dir.mkdir(parents=True, exist_ok=True)
    
    # Si le dossier existe d√©j√†, le supprimer pour un clone frais
    if temp_dir.exists():
        shutil.rmtree(temp_dir)
        temp_dir.mkdir(parents=True, exist_ok=True)
    
    # Cloner le repository
    repo_url = "https://github.com/simonsobs/pixell.git"
    try:
        result = subprocess.run(
            ["git", "clone", "--depth", "1", repo_url, str(temp_dir)],
            capture_output=True,
            text=True,
            timeout=300
        )
        
        if result.returncode == 0:
            print(f"‚úÖ Repository clon√© avec succ√®s dans {temp_dir}")
            return temp_dir
        else:
            print(f"‚ùå Erreur lors du clonage: {result.stderr}")
            return None
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout lors du clonage")
        return None
    except Exception as e:
        print(f"‚ùå Exception lors du clonage: {e}")
        return None

def generate_pixell_context(repo_dir):
    """G√©n√®re le contexte de pixell avec contextmaker.make()"""
    print("üîÑ G√©n√©ration du contexte avec contextmaker.make()...")
    
    # Cr√©er le dossier de sortie
    output_dir = Path("public/context/astronomy")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # D√©finir le chemin de sortie
    output_file = output_dir / "pixell-context.txt"
    
    try:
        # Importer contextmaker
        import contextmaker
        
        print(f"üìã Param√®tres contextmaker.make():")
        print(f"  - library_name: pixell")
        print(f"  - output_path: {output_file}")
        print(f"  - input_path: {repo_dir}")
        print(f"  - rough: True")
        
        # Appeler contextmaker.make() avec la nouvelle structure
        result = contextmaker.make(
            library_name="pixell",
            output_path=str(output_file),
            input_path=str(repo_dir),
            rough=True,
        )
        
        print(f"üìä R√©sultat contextmaker: {result}")
        
        # V√©rifier que le fichier a √©t√© cr√©√©
        if result and output_file.exists():
            print(f"‚úÖ Contexte g√©n√©r√© avec succ√®s: {output_file}")
            
            # Lire et afficher les premi√®res lignes
            with open(output_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            print(f"üìÑ Taille du fichier: {len(content)} caract√®res")
            print("üìÑ Premi√®res lignes:")
            print("=" * 50)
            print(content[:500] + "..." if len(content) > 500 else content)
            print("=" * 50)
            
            return True
        else:
            print(f"‚ùå Fichier de contexte non trouv√©: {output_file}")
            return False
            
    except ImportError:
        print("‚ùå contextmaker n'est pas install√©")
        print("   Installez-le avec: pip install contextmaker")
        return False
    except Exception as e:
        print(f"‚ùå Exception lors de la g√©n√©ration: {e}")
        return False

def cleanup_temp_repo(repo_dir):
    """Nettoie le repository temporaire"""
    try:
        shutil.rmtree(repo_dir)
        print(f"üßπ Repository temporaire supprim√©: {repo_dir}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de supprimer le repository temporaire: {e}")

def main():
    """Point d'entr√©e principal"""
    print("üöÄ Test de g√©n√©ration de contexte pour pixell")
    print("=" * 60)
    
    # √âtape 1: Cloner le repository
    repo_dir = clone_pixell_repo()
    if not repo_dir:
        print("‚ùå Impossible de cloner le repository")
        return 1
    
    try:
        # √âtape 2: G√©n√©rer le contexte
        success = generate_pixell_context(repo_dir)
        
        if success:
            print("üéâ Contexte de pixell g√©n√©r√© avec succ√®s!")
            print(f"üìÅ Fichier cr√©√©: public/context/astronomy/pixell-context.txt")
        else:
            print("üí• √âchec de la g√©n√©ration du contexte")
            return 1
            
    finally:
        # √âtape 3: Nettoyer le repository temporaire
        cleanup_temp_repo(repo_dir)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
