#!/usr/bin/env python3
"""
Script de nettoyage pour supprimer les scripts redondants
Apr√®s la cr√©ation des scripts unifi√©s, ce script supprime les anciens scripts
"""

import os
import shutil
from pathlib import Path

def cleanup_scripts():
    """Supprime les scripts redondants"""
    
    # Scripts √† supprimer (redondants ou obsol√®tes)
    scripts_to_remove = [
        # Scripts de gestion des contextes (remplac√©s par context-manager-unified.py)
        "update-context-status.js",
        "update-context-auto.js", 
        "update-context-python.py",
        "build-context.js",
        "generate-context-module.js",
        "update-config-from-contexts.py",
        
        # Scripts de maintenance (remplac√©s par maintenance.py)
        "daily_maintenance.py",
        "optimized-auto-update.py",
        "monitor-updater.py",
        
        # Scripts de d√©ploiement (supprim√©s)
        "deploy-gcp.sh",
        "deploy-gcp-budget.sh",
        "setup-deployment.sh",
        "setup-budget-alerts.sh",
        
        # Doublons
        "generate-programs-from-libraries.js",  # Doublon de la version Python
        
        # Scripts de validation (peuvent √™tre fusionn√©s)
        "validate-config.js",
        "validate-config.ts",
    ]
    
    # Scripts √† garder (essentiels)
    scripts_to_keep = [
        # Scripts unifi√©s (nouveaux)
        "maintenance_modular.py", 
        
        # Scripts essentiels
        "generate-programs-from-libraries.py",
        "generate-missing-contexts.py",
        "generate-contexts-with-clone.py",
        "generate-and-sync-all.py",
        
        # Scripts de configuration
        "setup_maintenance_service.sh",
        "service-control.sh",
        "schedule_daily_maintenance.py",
        
        # Scripts de test
        "test_maintenance.py",
        "test-unified-scripts.py",
        
        # Scripts de donn√©es
        "update-domain-data.py",
        "update-paths.py",
        
        # Script de nettoyage lui-m√™me
        "cleanup-scripts.py",
    ]
    
    scripts_dir = Path("scripts")
    
    print("üßπ Nettoyage des scripts redondants...")
    print("=" * 50)
    
    # V√©rifier les scripts √† supprimer
    removed_count = 0
    for script in scripts_to_remove:
        script_path = scripts_dir / script
        if script_path.exists():
            try:
                script_path.unlink()
                print(f"üóëÔ∏è  Supprim√©: {script}")
                removed_count += 1
            except Exception as e:
                print(f"‚ùå Erreur suppression {script}: {e}")
        else:
            print(f"‚ÑπÔ∏è  Non trouv√©: {script}")
    
    print(f"\n‚úÖ {removed_count} scripts supprim√©s")
    
    # Lister les scripts restants
    print("\nüìã Scripts conserv√©s:")
    print("-" * 30)
    
    remaining_scripts = []
    for script_file in scripts_dir.glob("*"):
        if script_file.is_file() and script_file.name not in scripts_to_remove:
            remaining_scripts.append(script_file.name)
    
    for script in sorted(remaining_scripts):
        print(f"‚úÖ {script}")
    
    print(f"\nüìä R√©sum√©:")
    print(f"   - Scripts supprim√©s: {removed_count}")
    print(f"   - Scripts conserv√©s: {len(remaining_scripts)}")
    print(f"   - Total: {len(remaining_scripts) + removed_count}")
    
    # Cr√©er un fichier de documentation
    create_documentation(remaining_scripts)

def create_documentation(scripts):
    """Cr√©e une documentation des scripts restants"""
    
    doc_content = """# Scripts de CMB Agent Info

## Scripts unifi√©s (nouveaux)

### `context-manager-unified.py`
Script unifi√© pour la gestion des contextes.
**Remplace:** update-context-status.js, update-context-auto.js, update-context-python.py, build-context.js, generate-context-module.js, update-config-from-contexts.py

**Utilisation:**
```bash
python3 maintenance/context-manager-unified.py --force
```

### `maintenance_modular.py`
Script de maintenance modulaire.
**Remplace:** maintenance.py, context-manager-unified.py, daily_maintenance.py, optimized-auto-update.py, monitor-updater.py

**Utilisation:**
```bash
# Maintenance compl√®te
python3 maintenance/maintenance_modular.py --mode full

# Maintenance rapide
python3 maintenance/maintenance_modular.py --mode quick
```

## Scripts essentiels

### G√©n√©ration et configuration
- `generate-programs-from-libraries.py` - G√©n√®re config.json depuis les donn√©es JSON
- `generate-missing-contexts.py` - G√©n√®re les contextes manquants
- `generate-contexts-with-clone.py` - G√©n√®re les contextes avec clonage Git
- `generate-and-sync-all.py` - G√©n√©ration et synchronisation compl√®te

### Configuration et services
- `setup_maintenance_service.sh` - Configuration du service de maintenance
- `service-control.sh` - Contr√¥le des services
- `schedule_daily_maintenance.py` - Planification de la maintenance

### Tests et donn√©es
- `test_maintenance.py` - Tests de maintenance
- `test-unified-scripts.py` - Tests des scripts unifi√©s
- `update-domain-data.py` - Mise √† jour des donn√©es de domaine
- `update-paths.py` - Mise √† jour des chemins

## Utilisation recommand√©e

### Maintenance quotidienne
```bash
python3 maintenance/maintenance_modular.py --mode quick
```

### Mise √† jour des contextes
```bash
python3 maintenance/maintenance_modular.py --mode full
```

### G√©n√©ration de contextes manquants
```bash
python3 maintenance/generate-missing-contexts.py --domain astronomy
```
"""
    
    with open("maintenance/README.md", "w") as f:
        f.write(doc_content)
    
    print(f"\nüìù Documentation cr√©√©e: maintenance/README.md")

if __name__ == "__main__":
    cleanup_scripts()
