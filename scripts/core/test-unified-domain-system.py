#!/usr/bin/env python3
"""
Script de test pour le syst√®me unifi√© de gestion des domaines.
Teste la mise √† jour des domaines et v√©rifie la coh√©rence des donn√©es.
"""

import json
import sys
import subprocess
from pathlib import Path
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DomainSystemTester:
    """Testeur pour le syst√®me unifi√© de domaines"""
    
    def __init__(self):
        self.base_dir = Path(".")
        self.data_dir = self.base_dir / "app" / "data"
        self.unified_script = self.base_dir / "scripts" / "core" / "unified-domain-updater.py"
        
        # Domaines √† tester
        self.domains = ['astronomy', 'biochemistry', 'finance', 'machinelearning']
    
    def test_script_exists(self) -> bool:
        """Teste si le script unifi√© existe"""
        logger.info("üîç Test: V√©rification de l'existence du script unifi√©...")
        
        if not self.unified_script.exists():
            logger.error(f"‚ùå Script unifi√© non trouv√©: {self.unified_script}")
            return False
        
        logger.info("‚úÖ Script unifi√© trouv√©")
        return True
    
    def test_script_syntax(self) -> bool:
        """Teste la syntaxe du script unifi√©"""
        logger.info("üîç Test: V√©rification de la syntaxe du script...")
        
        try:
            result = subprocess.run(
                ["python3", "-m", "py_compile", str(self.unified_script)],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ Syntaxe du script valide")
                return True
            else:
                logger.error(f"‚ùå Erreur de syntaxe: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test de syntaxe: {e}")
            return False
    
    def test_help_command(self) -> bool:
        """Teste la commande d'aide du script"""
        logger.info("üîç Test: V√©rification de la commande d'aide...")
        
        try:
            result = subprocess.run(
                ["python3", str(self.unified_script), "--help"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0 and "Syst√®me unifi√© de mise √† jour des domaines" in result.stdout:
                logger.info("‚úÖ Commande d'aide fonctionne")
                return True
            else:
                logger.error(f"‚ùå Commande d'aide √©chou√©e: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå Timeout lors du test de la commande d'aide")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test de la commande d'aide: {e}")
            return False
    
    def test_domain_update(self, domain: str) -> bool:
        """Teste la mise √† jour d'un domaine sp√©cifique"""
        logger.info(f"üîç Test: Mise √† jour du domaine {domain}...")
        
        try:
            result = subprocess.run(
                ["python3", str(self.unified_script), "--domain", domain],
                capture_output=True,
                text=True,
                timeout=300  # 5 minutes timeout
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ Domaine {domain} mis √† jour avec succ√®s")
                return True
            else:
                logger.error(f"‚ùå √âchec de la mise √† jour du domaine {domain}: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå Timeout lors de la mise √† jour du domaine {domain}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la mise √† jour du domaine {domain}: {e}")
            return False
    
    def test_json_files_exist(self) -> bool:
        """Teste si les fichiers JSON des domaines existent"""
        logger.info("üîç Test: V√©rification de l'existence des fichiers JSON...")
        
        all_exist = True
        for domain in self.domains:
            json_file = self.data_dir / f"{domain}-libraries.json"
            if json_file.exists():
                logger.info(f"‚úÖ Fichier JSON trouv√©: {json_file}")
            else:
                logger.error(f"‚ùå Fichier JSON manquant: {json_file}")
                all_exist = False
        
        return all_exist
    
    def test_json_structure(self) -> bool:
        """Teste la structure des fichiers JSON"""
        logger.info("üîç Test: V√©rification de la structure des fichiers JSON...")
        
        all_valid = True
        for domain in self.domains:
            json_file = self.data_dir / f"{domain}-libraries.json"
            
            if not json_file.exists():
                continue
            
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # V√©rifier la structure requise
                required_fields = ['libraries', 'domain', 'description', 'keywords']
                for field in required_fields:
                    if field not in data:
                        logger.error(f"‚ùå Champ manquant dans {json_file}: {field}")
                        all_valid = False
                
                # V√©rifier la structure des biblioth√®ques
                if 'libraries' in data and data['libraries']:
                    lib = data['libraries'][0]
                    lib_required_fields = ['name', 'github_url', 'stars', 'rank']
                    for field in lib_required_fields:
                        if field not in lib:
                            logger.error(f"‚ùå Champ manquant dans la biblioth√®que de {json_file}: {field}")
                            all_valid = False
                
                if all_valid:
                    logger.info(f"‚úÖ Structure JSON valide: {json_file}")
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Erreur JSON dans {json_file}: {e}")
                all_valid = False
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la lecture de {json_file}: {e}")
                all_valid = False
        
        return all_valid
    
    def test_library_counts(self) -> bool:
        """Teste le nombre de biblioth√®ques par domaine"""
        logger.info("üîç Test: V√©rification du nombre de biblioth√®ques...")
        
        all_valid = True
        expected_counts = {
            'astronomy': (50, 200),  # Entre 50 et 200 biblioth√®ques
            'biochemistry': (5, 50),   # Entre 5 et 50 biblioth√®ques
            'finance': (5, 50),        # Entre 5 et 50 biblioth√®ques
            'machinelearning': (5, 50) # Entre 5 et 50 biblioth√®ques
        }
        
        for domain in self.domains:
            json_file = self.data_dir / f"{domain}-libraries.json"
            
            if not json_file.exists():
                continue
            
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                lib_count = len(data.get('libraries', []))
                min_count, max_count = expected_counts.get(domain, (1, 100))
                
                if min_count <= lib_count <= max_count:
                    logger.info(f"‚úÖ {domain}: {lib_count} biblioth√®ques (attendu: {min_count}-{max_count})")
                else:
                    logger.warning(f"‚ö†Ô∏è {domain}: {lib_count} biblioth√®ques (attendu: {min_count}-{max_count})")
                    # Ne pas √©chouer le test pour cela, juste avertir
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification de {domain}: {e}")
                all_valid = False
        
        return all_valid
    
    def run_all_tests(self) -> bool:
        """Ex√©cute tous les tests"""
        logger.info("üöÄ D√©but des tests du syst√®me unifi√© de domaines")
        logger.info("=" * 60)
        
        tests = [
            ("Existence du script", self.test_script_exists),
            ("Syntaxe du script", self.test_script_syntax),
            ("Commande d'aide", self.test_help_command),
            ("Fichiers JSON existants", self.test_json_files_exist),
            ("Structure JSON", self.test_json_structure),
            ("Nombre de biblioth√®ques", self.test_library_counts),
        ]
        
        results = {}
        for test_name, test_func in tests:
            logger.info(f"\n--- {test_name} ---")
            try:
                results[test_name] = test_func()
            except Exception as e:
                logger.error(f"‚ùå Erreur lors du test '{test_name}': {e}")
                results[test_name] = False
        
        # R√©sum√©
        logger.info("\n" + "=" * 60)
        logger.info("üìä R√âSUM√â DES TESTS")
        logger.info("=" * 60)
        
        passed = sum(1 for result in results.values() if result)
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            logger.info(f"{status} {test_name}")
        
        logger.info(f"\nR√©sultat global: {passed}/{total} tests r√©ussis")
        
        if passed == total:
            logger.info("üéâ Tous les tests sont pass√©s avec succ√®s!")
            return True
        else:
            logger.error("‚ùå Certains tests ont √©chou√©")
            return False

def main():
    """Fonction principale"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Test du syst√®me unifi√© de domaines")
    parser.add_argument("--domain", help="Tester un domaine sp√©cifique")
    parser.add_argument("--update", action="store_true", help="Mettre √† jour les domaines avant les tests")
    parser.add_argument("--verbose", "-v", action="store_true", help="Mode verbeux")
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    tester = DomainSystemTester()
    
    if args.update:
        logger.info("üîÑ Mise √† jour des domaines avant les tests...")
        if args.domain:
            success = tester.test_domain_update(args.domain)
            if not success:
                logger.error("‚ùå √âchec de la mise √† jour, arr√™t des tests")
                sys.exit(1)
        else:
            # Mettre √† jour tous les domaines
            for domain in tester.domains:
                success = tester.test_domain_update(domain)
                if not success:
                    logger.warning(f"‚ö†Ô∏è √âchec de la mise √† jour du domaine {domain}")
    
    if args.domain:
        # Tester un domaine sp√©cifique
        success = tester.test_domain_update(args.domain)
        if success:
            logger.info(f"‚úÖ Test du domaine {args.domain} r√©ussi")
        else:
            logger.error(f"‚ùå Test du domaine {args.domain} √©chou√©")
            sys.exit(1)
    else:
        # Ex√©cuter tous les tests
        success = tester.run_all_tests()
        if not success:
            sys.exit(1)

if __name__ == "__main__":
    main()
