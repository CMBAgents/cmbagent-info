#!/usr/bin/env python3
"""
Script de migration vers le syst√®me unifi√© de gestion des domaines.
Ce script facilite la transition depuis l'ancien syst√®me vers le nouveau.
"""

import json
import shutil
import subprocess
from pathlib import Path
import logging
from datetime import datetime

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DomainSystemMigrator:
    """Migrateur vers le syst√®me unifi√© de domaines"""
    
    def __init__(self):
        self.base_dir = Path(".")
        self.data_dir = self.base_dir / "app" / "data"
        self.backup_dir = self.base_dir / "backup_migration"
        self.unified_script = self.base_dir / "scripts" / "core" / "unified-domain-updater.py"
        
        # Cr√©er le dossier de sauvegarde
        self.backup_dir.mkdir(exist_ok=True)
    
    def backup_existing_data(self):
        """Sauvegarde les donn√©es existantes"""
        logger.info("üíæ Sauvegarde des donn√©es existantes...")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_subdir = self.backup_dir / f"backup_{timestamp}"
        backup_subdir.mkdir(exist_ok=True)
        
        # Fichiers √† sauvegarder
        files_to_backup = [
            "app/data/astronomy-libraries.json",
            "app/data/biochemistry-libraries.json",
            "app/data/finance-libraries.json",
            "app/data/machinelearning-libraries.json",
            "config.json",
        ]
        
        for file_path in files_to_backup:
            source = Path(file_path)
            if source.exists():
                dest = backup_subdir / source.name
                shutil.copy2(source, dest)
                logger.info(f"‚úÖ Sauvegard√©: {file_path}")
            else:
                logger.info(f"üìÑ Fichier non trouv√©: {file_path}")
        
        logger.info(f"üíæ Sauvegarde termin√©e dans: {backup_subdir}")
        return backup_subdir
    
    def verify_unified_script(self) -> bool:
        """V√©rifie que le script unifi√© existe et fonctionne"""
        logger.info("üîç V√©rification du script unifi√©...")
        
        if not self.unified_script.exists():
            logger.error(f"‚ùå Script unifi√© non trouv√©: {self.unified_script}")
            return False
        
        # Tester la syntaxe
        try:
            result = subprocess.run(
                ["python3", "-m", "py_compile", str(self.unified_script)],
                capture_output=True,
                text=True
            )
            
            if result.returncode != 0:
                logger.error(f"‚ùå Erreur de syntaxe dans le script unifi√©: {result.stderr}")
                return False
            
            logger.info("‚úÖ Script unifi√© v√©rifi√©")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification: {e}")
            return False
    
    def test_unified_script(self) -> bool:
        """Teste le script unifi√© avec un domaine simple"""
        logger.info("üß™ Test du script unifi√©...")
        
        try:
            # Tester la commande d'aide
            result = subprocess.run(
                ["python3", str(self.unified_script), "--help"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode != 0:
                logger.error(f"‚ùå Test de la commande d'aide √©chou√©: {result.stderr}")
                return False
            
            logger.info("‚úÖ Test du script unifi√© r√©ussi")
            return True
            
        except subprocess.TimeoutExpired:
            logger.error("‚ùå Timeout lors du test du script unifi√©")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test: {e}")
            return False
    
    def migrate_domain_data(self, domain: str) -> bool:
        """Migre les donn√©es d'un domaine vers le nouveau syst√®me"""
        logger.info(f"üîÑ Migration du domaine {domain}...")
        
        try:
            # Utiliser le script unifi√© pour mettre √† jour le domaine
            result = subprocess.run(
                ["python3", str(self.unified_script), "--domain", domain],
                capture_output=True,
                text=True,
                timeout=600  # 10 minutes timeout
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ Domaine {domain} migr√© avec succ√®s")
                return True
            else:
                logger.error(f"‚ùå √âchec de la migration du domaine {domain}: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå Timeout lors de la migration du domaine {domain}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la migration du domaine {domain}: {e}")
            return False
    
    def update_config_json(self):
        """Met √† jour le fichier config.json pour utiliser le nouveau syst√®me"""
        logger.info("‚öôÔ∏è Mise √† jour de la configuration...")
        
        config_file = self.base_dir / "config.json"
        if not config_file.exists():
            logger.warning("‚ö†Ô∏è Fichier config.json non trouv√©")
            return
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # Ajouter une note sur le nouveau syst√®me
            if 'system_info' not in config:
                config['system_info'] = {}
            
            config['system_info']['unified_domain_system'] = {
                'enabled': True,
                'script': 'scripts/core/unified-domain-updater.py',
                'migration_date': datetime.now().isoformat(),
                'description': 'Syst√®me unifi√© de gestion des domaines avec API GitHub'
            }
            
            # Sauvegarder
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            logger.info("‚úÖ Configuration mise √† jour")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la mise √† jour de la configuration: {e}")
    
    def verify_migration(self) -> bool:
        """V√©rifie que la migration s'est bien d√©roul√©e"""
        logger.info("üîç V√©rification de la migration...")
        
        domains = ['astronomy', 'biochemistry', 'finance', 'machinelearning']
        all_valid = True
        
        for domain in domains:
            json_file = self.data_dir / f"{domain}-libraries.json"
            
            if not json_file.exists():
                logger.error(f"‚ùå Fichier JSON manquant: {json_file}")
                all_valid = False
                continue
            
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # V√©rifier la structure
                required_fields = ['libraries', 'domain', 'description', 'keywords']
                for field in required_fields:
                    if field not in data:
                        logger.error(f"‚ùå Champ manquant dans {json_file}: {field}")
                        all_valid = False
                
                # V√©rifier le nombre de biblioth√®ques
                lib_count = len(data.get('libraries', []))
                if lib_count > 0:
                    logger.info(f"‚úÖ {domain}: {lib_count} biblioth√®ques")
                else:
                    logger.warning(f"‚ö†Ô∏è {domain}: Aucune biblioth√®que trouv√©e")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification de {domain}: {e}")
                all_valid = False
        
        return all_valid
    
    def run_migration(self, domains: list = None):
        """Ex√©cute la migration compl√®te"""
        logger.info("üöÄ D√©but de la migration vers le syst√®me unifi√©")
        logger.info("=" * 60)
        
        if domains is None:
            domains = ['astronomy', 'biochemistry', 'finance', 'machinelearning']
        
        # √âtape 1: Sauvegarde
        backup_dir = self.backup_existing_data()
        
        # √âtape 2: V√©rification du script unifi√©
        if not self.verify_unified_script():
            logger.error("‚ùå Script unifi√© non valide, arr√™t de la migration")
            return False
        
        if not self.test_unified_script():
            logger.error("‚ùå Test du script unifi√© √©chou√©, arr√™t de la migration")
            return False
        
        # √âtape 3: Migration des domaines
        migration_results = {}
        for domain in domains:
            logger.info(f"\n--- Migration du domaine {domain} ---")
            success = self.migrate_domain_data(domain)
            migration_results[domain] = success
        
        # √âtape 4: Mise √† jour de la configuration
        self.update_config_json()
        
        # √âtape 5: V√©rification
        if not self.verify_migration():
            logger.error("‚ùå V√©rification de la migration √©chou√©e")
            return False
        
        # R√©sum√©
        logger.info("\n" + "=" * 60)
        logger.info("üìä R√âSUM√â DE LA MIGRATION")
        logger.info("=" * 60)
        
        successful = sum(1 for success in migration_results.values() if success)
        total = len(migration_results)
        
        for domain, success in migration_results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"{status} {domain}")
        
        logger.info(f"\nR√©sultat: {successful}/{total} domaines migr√©s avec succ√®s")
        logger.info(f"üíæ Sauvegarde disponible dans: {backup_dir}")
        
        if successful == total:
            logger.info("üéâ Migration termin√©e avec succ√®s!")
            return True
        else:
            logger.error("‚ùå Migration partiellement √©chou√©e")
            return False

def main():
    """Fonction principale"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Migration vers le syst√®me unifi√© de domaines")
    parser.add_argument("--domains", nargs="+", help="Domaines √† migrer (par d√©faut: tous)")
    parser.add_argument("--backup-only", action="store_true", help="Sauvegarder seulement")
    parser.add_argument("--verify-only", action="store_true", help="V√©rifier seulement")
    parser.add_argument("--verbose", "-v", action="store_true", help="Mode verbeux")
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    migrator = DomainSystemMigrator()
    
    if args.backup_only:
        migrator.backup_existing_data()
    elif args.verify_only:
        success = migrator.verify_migration()
        if not success:
            sys.exit(1)
    else:
        success = migrator.run_migration(args.domains)
        if not success:
            sys.exit(1)

if __name__ == "__main__":
    main()
