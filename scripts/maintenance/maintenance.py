#!/usr/bin/env python3
"""
Script de maintenance simplifi√© pour CMB Agent Info
Remplace: daily_maintenance.py, optimized-auto-update.py, monitor-updater.py

Fonctionnalit√©s:
1. Maintenance quotidienne des biblioth√®ques
2. G√©n√©ration des contextes manquants
3. Synchronisation avec le cloud
4. Monitoring des co√ªts
5. Mise √† jour automatique de la configuration
"""

import os
import sys
import json
import csv
import subprocess
import tempfile
import shutil
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Set, Optional, Tuple
import re
from time import sleep
import random
from tqdm import tqdm
from multiprocessing import Pool

class MaintenanceManager:
    def __init__(self, base_dir: str = "."):
        self.base_dir = Path(base_dir)
        self.update_bdd_dir = self.base_dir / "app" / "update_bdd"
        self.data_dir = self.base_dir / "app" / "data" 
        self.context_dir = self.base_dir / "public" / "context"
        self.temp_dir = self.base_dir / "temp" / "repos"
        self.logs_dir = self.base_dir / "logs"
        
        # Cr√©er les dossiers n√©cessaires
        self.logs_dir.mkdir(exist_ok=True)
        self.temp_dir.mkdir(parents=True, exist_ok=True)
        
        # Fichiers de donn√©es
        self.ascl_csv = self.update_bdd_dir / "ascl_repos_with_stars.csv"
        self.last_csv = self.update_bdd_dir / "last.csv"
        self.astronomy_json = self.data_dir / "astronomy-libraries.json"
        self.commit_log_file = self.base_dir / "commit_log.json"
        
        # Setup logging
        self.setup_logging()
        
    def setup_logging(self):
        """Configure le logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.logs_dir / 'maintenance.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def step0_ensure_dependencies(self):
        """√âtape 0: V√©rifie et installe les d√©pendances n√©cessaires"""
        self.logger.info("=== √âTAPE 0: V√©rification et installation des d√©pendances ===")
        
        try:
            # V√©rifier et mettre √† jour contextmaker
            if not self._check_contextmaker():
                self.logger.info("Installation de contextmaker...")
                self._install_contextmaker()
            else:
                self.logger.info("Mise √† jour de contextmaker vers la derni√®re version...")
                self._install_contextmaker()
            
            # V√©rifier git
            if not self._check_git():
                self.logger.error("‚ùå Git n'est pas install√©. Veuillez l'installer manuellement.")
                raise Exception("Git non disponible")
            
            self.logger.info("‚úÖ √âtape 0 termin√©e: toutes les d√©pendances sont disponibles")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur dans l'√©tape 0: {e}")
            raise
    
    def _check_contextmaker(self) -> bool:
        """V√©rifie si contextmaker est disponible"""
        try:
            result = subprocess.run(
                ["python3", "-c", "import contextmaker"],
                capture_output=True,
                text=True
            )
            return result.returncode == 0
        except Exception:
            return False
    
    def _install_contextmaker(self):
        """Installe contextmaker via pip"""
        try:
            self.logger.info("Installation/mise √† jour de contextmaker via pip3...")
            result = subprocess.run(
                ["pip3", "install", "--upgrade", "contextmaker"],
                capture_output=True,
                text=True,
                timeout=300  # 5 minutes timeout
            )
            
            if result.returncode == 0:
                self.logger.info("‚úÖ contextmaker install√© avec succ√®s")
            else:
                self.logger.error(f"‚ùå √âchec de l'installation: {result.stderr}")
                raise Exception(f"Installation √©chou√©e: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            self.logger.error("‚ùå Timeout lors de l'installation de contextmaker")
            raise Exception("Timeout installation")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'installation: {e}")
            raise
    
    def _check_git(self) -> bool:
        """V√©rifie si git est disponible"""
        try:
            result = subprocess.run(["git", "--version"], capture_output=True, text=True)
            return result.returncode == 0
        except Exception:
            return False
    
    def step1_update_all_domains(self) -> Dict[str, bool]:
        """√âtape 1: Met √† jour tous les domaines avec le syst√®me unifi√©"""
        self.logger.info("=== √âTAPE 1: Mise √† jour de tous les domaines ===")
        
        try:
            # Utiliser le nouveau syst√®me unifi√©
            script_path = self.base_dir / "scripts" / "core" / "unified-domain-updater.py"
            if not script_path.exists():
                self.logger.error(f"‚ùå Script unifi√© non trouv√©: {script_path}")
                raise Exception("Script unifi√© introuvable")
            
            self.logger.info("üîÑ Ex√©cution du syst√®me unifi√© de mise √† jour des domaines...")
            result = subprocess.run(
                ["python3", str(script_path), "--maintenance"],
                cwd=self.base_dir,
                capture_output=True,
                text=True,
                timeout=1800  # 30 minutes timeout
            )
            
            if result.returncode == 0:
                self.logger.info("‚úÖ √âtape 1 termin√©e: tous les domaines mis √† jour")
                # Parser les r√©sultats si n√©cessaire
                return {"astronomy": True, "biochemistry": True, "finance": True, "machinelearning": True}
            else:
                self.logger.error(f"‚ùå Erreur lors de la mise √† jour: {result.stderr}")
                raise Exception(f"√âchec de la mise √† jour: {result.stderr}")
            
        except subprocess.TimeoutExpired:
            self.logger.error("‚ùå Timeout lors de la mise √† jour des domaines")
            raise Exception("Timeout de la mise √† jour")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur dans l'√©tape 1: {e}")
            raise
    
    def step2_update_context_status(self):
        """√âtape 2: Mise √† jour du statut des contextes"""
        self.logger.info("=== √âTAPE 2: Mise √† jour du statut des contextes ===")
        
        try:
            # Utiliser le script unifi√© context-manager-unified.py
            script_path = self.base_dir / "scripts" / "maintenance" / "context-manager-unified.py"
            if script_path.exists():
                self.logger.info("Ex√©cution de context-manager-unified.py (mise √† jour rapide)...")
                subprocess.run(["python3", str(script_path), "--quick"], cwd=self.base_dir, check=True)
                self.logger.info("‚úÖ Statut des contextes mis √† jour via le script unifi√©")
            else:
                self.logger.error("Script context-manager-unified.py non trouv√©")
                raise Exception("Script context-manager-unified.py introuvable")
            
            self.logger.info("‚úÖ √âtape 2 termin√©e: statut des contextes mis √† jour")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur dans l'√©tape 2: {e}")
            raise
    
    def step1_detect_github_changes(self):
        """√âtape 1: D√©tection des modifications GitHub et marquage des contextes obsol√®tes"""
        self.logger.info("=== √âTAPE 1: D√©tection des modifications GitHub ===")
        
        try:
            # Utiliser le script unifi√© pour d√©tecter les modifications
            script_path = self.base_dir / "scripts" / "maintenance" / "context-manager-unified.py"
            if script_path.exists():
                self.logger.info("Ex√©cution de la d√©tection des modifications GitHub...")
                result = subprocess.run(
                    ["python3", str(script_path), "--quick"], 
                    cwd=self.base_dir,
                    capture_output=True, 
                    text=True, 
                    check=True
                )
                self.logger.info("‚úÖ D√©tection des modifications GitHub termin√©e")
                if result.stdout:
                    # Afficher les r√©sultats de la d√©tection
                    for line in result.stdout.strip().split('\n'):
                        if line.strip() and ('üîÑ' in line or '‚úÖ' in line or 'repos v√©rifi√©s' in line):
                            self.logger.info(f"   {line}")
            else:
                self.logger.error("Script context-manager-unified.py non trouv√©")
                raise Exception("Script context-manager-unified.py introuvable")
            
            self.logger.info("‚úÖ √âtape 1 termin√©e: modifications GitHub d√©tect√©es")
            
        except subprocess.CalledProcessError as e:
            self.logger.error(f"‚ùå Erreur lors de la d√©tection GitHub: {e.stderr}")
            raise Exception(f"√âchec de la d√©tection GitHub: {e.stderr}")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur dans l'√©tape 1: {e}")
            raise

    def step2_5_fix_context_names(self):
        """√âtape 2.5: Correction des noms de fichiers de contexte"""
        self.logger.info("=== √âTAPE 2.5: Correction des noms de contexte ===")
        
        try:
            # Utiliser le script de correction des noms
            script_path = self.base_dir / "scripts" / "utils" / "fix-context-names.py"
            if script_path.exists():
                self.logger.info("Ex√©cution du correcteur de noms de contexte...")
                result = subprocess.run(["python3", str(script_path)], cwd=self.base_dir, 
                                      capture_output=True, text=True, check=True)
                self.logger.info("‚úÖ Correction des noms de contexte termin√©e")
                if result.stdout:
                    self.logger.info("üìã R√©sultats de la correction:")
                    for line in result.stdout.strip().split('\n'):
                        if line.strip() and ('‚úÖ' in line or 'üìù' in line):
                            self.logger.info(f"   {line}")
            else:
                self.logger.warning("Script fix-context-names.py non trouv√©, passage de l'√©tape")
            
        except subprocess.CalledProcessError as e:
            self.logger.error(f"‚ùå Erreur lors de la correction des noms: {e.stderr}")
            # Ne pas faire √©chouer la maintenance pour cette √©tape
        except Exception as e:
            self.logger.error(f"‚ùå Erreur dans l'√©tape 2.5: {e}")
            # Ne pas faire √©chouer la maintenance pour cette √©tape
    
    # Les m√©thodes _update_json_status_via_api, _check_server_status et _update_domain_via_api 
    # ont √©t√© supprim√©es car remplac√©es par l'utilisation directe de update-json-status.py
    
    def step3_generate_missing_contexts(self):
        """√âtape 3: G√©n√©ration des contextes manquants"""
        self.logger.info("=== √âTAPE 3: G√©n√©ration des contextes manquants ===")
        
        try:
            # Charger les donn√©es existantes
            astronomy_data = self._load_astronomy_data()
            finance_data = self._load_finance_data()
            
            # G√©n√©rer les contextes manquants pour astronomy
            self._generate_contexts_for_domain(astronomy_data, "astronomy")
            
            # G√©n√©rer les contextes manquants pour finance
            self._generate_contexts_for_domain(finance_data, "finance")
            
            # Nettoyer les contextes dupliqu√©s
            self._cleanup_duplicate_contexts()
            
            self.logger.info("‚úÖ √âtape 3 termin√©e")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur dans l'√©tape 3: {e}")
            raise
    
    def step4_update_configuration(self):
        """√âtape 4: Met √† jour la configuration"""
        self.logger.info("=== √âTAPE 4: Mise √† jour de la configuration ===")
        
        try:
            # Ex√©cuter le script unifi√© pour la mise √† jour de configuration
            script_path = self.base_dir / "scripts" / "maintenance" / "context-manager-unified.py"
            if script_path.exists():
                subprocess.run(["python3", str(script_path), "--quick"], cwd=self.base_dir, check=True)
                self.logger.info("‚úÖ Configuration mise √† jour via le script unifi√©")
            else:
                self.logger.error("Script context-manager-unified.py non trouv√©")
            
            self.logger.info("‚úÖ √âtape 4 termin√©e")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur dans l'√©tape 4: {e}")
            raise
    
    def step5_cleanup(self):
        """√âtape 5: Nettoyage"""
        self.logger.info("=== √âTAPE 5: Nettoyage ===")
        
        try:
            # Nettoyer les repositories temporaires
            if self.temp_dir.exists():
                shutil.rmtree(self.temp_dir)
                self.temp_dir.mkdir(parents=True, exist_ok=True)
            
            # Nettoyer les logs anciens (garder seulement 7 jours)
            self._cleanup_old_logs()
            
            self.logger.info("‚úÖ √âtape 5 termin√©e")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur dans l'√©tape 5: {e}")
            raise
    
    def run_full_maintenance(self):
        """Ex√©cute la maintenance compl√®te"""
        self.logger.info("üöÄ D√©but de la maintenance compl√®te")
        
        try:
            # √âtape 0: V√©rification et installation des d√©pendances
            self.step0_ensure_dependencies()
            
            # √âtape 1: Mise √† jour de tous les domaines
            domain_results = self.step1_update_all_domains()
            
            # √âtape 2: Mise √† jour du statut des contextes
            self.step2_update_context_status()
            
            # √âtape 3: G√©n√©ration contextes
            self.step3_generate_missing_contexts()
            
            # √âtape 4: Mise √† jour configuration
            self.step4_update_configuration()
            
            # √âtape 5: Nettoyage
            self.step5_cleanup()
            
            self.logger.info("üéâ Maintenance compl√®te termin√©e avec succ√®s!")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la maintenance: {e}")
            raise
    
    def run_quick_maintenance(self):
        """Ex√©cute une maintenance rapide avec d√©tection des modifications GitHub"""
        self.logger.info("üöÄ D√©but de la maintenance rapide")
        
        try:
            # √âtape 0: V√©rification des d√©pendances
            self.step0_ensure_dependencies()
            
            # √âtape 1: D√©tection des modifications GitHub et marquage des contextes obsol√®tes
            # self.step1_detect_github_changes()  # Comment√© temporairement
            
            # √âtape 2.5: Correction des noms de contexte
            self.step2_5_fix_context_names()
            
            # √âtape 3: G√©n√©ration contextes
            self.step3_generate_missing_contexts()
            
            # √âtape 4: Mise √† jour configuration
            self.step4_update_configuration()
            
            # √âtape 5: Nettoyage
            self.step5_cleanup()
            
            self.logger.info("üéâ Maintenance rapide termin√©e avec succ√®s!")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la maintenance: {e}")
            raise
    
    # M√©thodes utilitaires (simplifi√©es)
    def _download_ascl_data(self) -> List[Dict]:
        """T√©l√©charge les donn√©es ASCL"""
        # Impl√©mentation simplifi√©e - utilise les donn√©es existantes
        if self.ascl_csv.exists():
            return self._load_csv_data(self.ascl_csv)
        else:
            self.logger.warning("Fichier ASCL non trouv√©, utilisation des donn√©es existantes")
            return []
    
    def _extract_github_repos(self, ascl_data: List[Dict]) -> Set[str]:
        """Extrait les repositories GitHub"""
        github_repos = set()
        for item in ascl_data:
            if 'github_url' in item and item['github_url']:
                github_repos.add(item['github_url'])
        return github_repos
    
    def _fetch_stars_parallel(self, repos: List[str]) -> List[Dict]:
        """R√©cup√®re les √©toiles en parall√®le"""
        # Impl√©mentation simplifi√©e
        return [{"url": repo, "stars": 0} for repo in repos]
    
    def _filter_astronomy_repos(self, repos: List[Dict]) -> List[Dict]:
        """Filtre les repositories astronomie"""
        return repos  # Simplifi√©
    
    def _get_top_100(self, repos: List[Dict]) -> List[Dict]:
        """Obtient le top 100"""
        return repos[:100] if len(repos) > 100 else repos
    
    def _save_to_csv(self, data: List[Dict], filepath: Path):
        """Sauvegarde en CSV"""
        if data:
            with open(filepath, 'w', newline='') as f:
                writer = csv.DictWriter(f, fieldnames=data[0].keys())
                writer.writeheader()
                writer.writerows(data)
    
    def _load_astronomy_data(self) -> Dict:
        """Charge les donn√©es astronomy"""
        if self.astronomy_json.exists():
            with open(self.astronomy_json, 'r') as f:
                return json.load(f)
        return {"libraries": [], "domain": "astronomy"}
    
    def _load_finance_data(self) -> Dict:
        """Charge les donn√©es finance"""
        finance_json = self.data_dir / "finance-libraries.json"
        if finance_json.exists():
            with open(finance_json, 'r') as f:
                return json.load(f)
        return {"libraries": [], "domain": "finance"}
    
    def _update_libraries_data(self, existing_data: Dict, new_data: List[Dict]) -> List[Dict]:
        """Met √† jour les donn√©es des biblioth√®ques"""
        # Impl√©mentation simplifi√©e
        return existing_data.get("libraries", [])
    
    def _generate_contexts_for_domain(self, data: Dict, domain: str):
        """G√©n√®re les contextes pour un domaine"""
        self.logger.info(f"G√©n√©ration des contextes pour {domain}")
        # Utilise le script unifi√© pour la g√©n√©ration
        script_path = self.base_dir / "scripts" / "maintenance" / "context-manager-unified.py"
        if script_path.exists():
            self.logger.info("G√©n√©ration des contextes via le script unifi√©...")
            # Note: Le script unifi√© g√®re tous les domaines automatiquement
            # On l'appelle une seule fois pour tous les domaines
            if domain == "astronomy":  # Appeler seulement pour le premier domaine
                subprocess.run(["python3", str(script_path), "--full"], cwd=self.base_dir)
        else:
            self.logger.error("Script context-manager-unified.py non trouv√©")
    
    def _cleanup_duplicate_contexts(self):
        """Nettoie les contextes dupliqu√©s et garde le plus long pour chaque biblioth√®que"""
        self.logger.info("üßπ Nettoyage avanc√© des contextes dupliqu√©s...")
        self.logger.info("  - Suppression des doublons racine")
        self.logger.info("  - Conservation du contexte le plus long pour chaque biblioth√®que")
        self.logger.info("  - Mise √† jour automatique des JSON apr√®s chaque modification")
        
        script_path = self.base_dir / "scripts" / "maintenance" / "context-manager-unified.py"
        if script_path.exists():
            subprocess.run(["python3", str(script_path), "--cleanup"], cwd=self.base_dir, check=True)
            self.logger.info("‚úÖ Nettoyage avanc√© des contextes dupliqu√©s termin√©")
        else:
            self.logger.warning("Script context-manager-unified.py non trouv√©")
    
    def _cleanup_old_logs(self):
        """Nettoie les anciens logs"""
        cutoff_date = datetime.now() - timedelta(days=7)
        for log_file in self.logs_dir.glob("*.log"):
            if log_file.stat().st_mtime < cutoff_date.timestamp():
                log_file.unlink()
    
    def _load_csv_data(self, filepath: Path) -> List[Dict]:
        """Charge les donn√©es CSV"""
        data = []
        if filepath.exists():
            with open(filepath, 'r') as f:
                reader = csv.DictReader(f)
                data = list(reader)
        return data

def main():
    """Point d'entr√©e principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Script de maintenance simplifi√©")
    parser.add_argument("--quick", action="store_true", help="Maintenance rapide (sans r√©cup√©ration ASCL)")
    parser.add_argument("--base-dir", default=".", help="R√©pertoire de base")
    
    args = parser.parse_args()
    
    manager = MaintenanceManager(args.base_dir)
    
    if args.quick:
        manager.run_quick_maintenance()
    else:
        manager.run_full_maintenance()

if __name__ == "__main__":
    main()
