#!/usr/bin/env python3
"""
Script de nettoyage pour supprimer l'ancien syst√®me de gestion des domaines.
Ce script supprime les fichiers obsol√®tes maintenant que nous avons le syst√®me unifi√©.
"""

import os
import shutil
from pathlib import Path
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def cleanup_old_files():
    """Supprime les anciens fichiers du syst√®me de domaines"""
    
    # Fichiers √† supprimer (ancien syst√®me)
    files_to_remove = [
        # Anciens scripts de mise √† jour
        "app/update_bdd/get100.py",
        "scripts/utils/update-domain-data.py",
        
        # Anciens scripts de cr√©ation de domaine (remplac√©s par le syst√®me unifi√©)
        "scripts/templates/create-domain.py",
        "scripts/templates/delete-domain.py",
        "scripts/templates/domain-utils.py",
        "scripts/templates/domain-config.json",
        
        # Anciens scripts de maintenance obsol√®tes
        "scripts/maintenance/daily_maintenance.py",
        "scripts/maintenance/optimized-auto-update.py",
        "scripts/maintenance/monitor-updater.py",
        
        # Fichiers CSV temporaires (garder seulement les derniers)
        "app/update_bdd/top_astronomy_cosmology_repos.csv",
        "app/update_bdd/avantdernier.csv",
        
        # Anciens scripts de test
        "scripts/utils/test_maintenance.py",
        "scripts/utils/test-unified-scripts.py",
    ]
    
    # Dossiers √† nettoyer (mais pas supprimer compl√®tement)
    dirs_to_clean = [
        "app/update_bdd/__pycache__",
        "scripts/templates/__pycache__",
        "scripts/maintenance/__pycache__",
        "scripts/utils/__pycache__",
        "temp/repos",
        "temp/contexts",
    ]
    
    logger.info("üßπ Nettoyage de l'ancien syst√®me de domaines...")
    
    # Supprimer les fichiers obsol√®tes
    removed_files = 0
    for file_path in files_to_remove:
        path = Path(file_path)
        if path.exists():
            try:
                if path.is_file():
                    path.unlink()
                    logger.info(f"‚úÖ Fichier supprim√©: {file_path}")
                    removed_files += 1
                elif path.is_dir():
                    shutil.rmtree(path)
                    logger.info(f"‚úÖ Dossier supprim√©: {file_path}")
                    removed_files += 1
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de supprimer {file_path}: {e}")
        else:
            logger.debug(f"üìÑ Fichier non trouv√© (d√©j√† supprim√©): {file_path}")
    
    # Nettoyer les dossiers (supprimer le contenu mais garder le dossier)
    cleaned_dirs = 0
    for dir_path in dirs_to_clean:
        path = Path(dir_path)
        if path.exists() and path.is_dir():
            try:
                # Supprimer le contenu du dossier
                for item in path.iterdir():
                    if item.is_file():
                        item.unlink()
                    elif item.is_dir():
                        shutil.rmtree(item)
                logger.info(f"‚úÖ Dossier nettoy√©: {dir_path}")
                cleaned_dirs += 1
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de nettoyer {dir_path}: {e}")
    
    logger.info(f"üéâ Nettoyage termin√©:")
    logger.info(f"   - {removed_files} fichiers/dossiers supprim√©s")
    logger.info(f"   - {cleaned_dirs} dossiers nettoy√©s")

def backup_important_files():
    """Sauvegarde les fichiers importants avant nettoyage"""
    
    backup_dir = Path("backup_old_system")
    backup_dir.mkdir(exist_ok=True)
    
    # Fichiers importants √† sauvegarder
    important_files = [
        "app/update_bdd/ascl_repos_with_stars.csv",
        "app/update_bdd/last.csv",
        "app/data/astronomy-libraries.json",
        "app/data/biochemistry-libraries.json", 
        "app/data/finance-libraries.json",
        "app/data/machinelearning-libraries.json",
    ]
    
    logger.info("üíæ Sauvegarde des fichiers importants...")
    
    for file_path in important_files:
        source = Path(file_path)
        if source.exists():
            dest = backup_dir / source.name
            try:
                shutil.copy2(source, dest)
                logger.info(f"‚úÖ Sauvegard√©: {file_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de sauvegarder {file_path}: {e}")

def main():
    """Fonction principale"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Nettoyage de l'ancien syst√®me de domaines")
    parser.add_argument("--backup", action="store_true", help="Sauvegarder les fichiers importants avant nettoyage")
    parser.add_argument("--dry-run", action="store_true", help="Simuler le nettoyage sans supprimer")
    
    args = parser.parse_args()
    
    if args.backup:
        backup_important_files()
    
    if args.dry_run:
        logger.info("üîç Mode simulation - aucun fichier ne sera supprim√©")
        # Afficher ce qui serait supprim√©
        files_to_remove = [
            "app/update_bdd/get100.py",
            "scripts/utils/update-domain-data.py",
            "scripts/templates/create-domain.py",
            "scripts/templates/delete-domain.py",
            "scripts/templates/domain-utils.py",
            "scripts/templates/domain-config.json",
        ]
        
        for file_path in files_to_remove:
            path = Path(file_path)
            if path.exists():
                logger.info(f"üìÑ Serait supprim√©: {file_path}")
            else:
                logger.info(f"üìÑ Non trouv√©: {file_path}")
    else:
        cleanup_old_files()

if __name__ == "__main__":
    main()
