#!/usr/bin/env python3
"""
Script de test pour la maintenance quotidienne

Ce script teste les diff√©rentes fonctions de maintenance sans effectuer
les op√©rations r√©elles (mode dry-run).

Utilisation: python scripts/test_maintenance.py
"""

import sys
import subprocess
from pathlib import Path
import json
import logging

# Configuration du logging pour les tests
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def test_prerequisites():
    """Teste les pr√©requis pour la maintenance"""
    print("üîç Test des pr√©requis...")
    
    errors = []
    
    # Test 1: V√©rifier qu'on est dans le bon r√©pertoire
    if not Path("package.json").exists():
        errors.append("‚ùå package.json non trouv√© - ex√©cutez depuis la racine du projet")
    else:
        print("‚úÖ R√©pertoire de projet valide")
    
    # Test 2: V√©rifier Python
    try:
        python_version = sys.version_info
        if python_version.major >= 3 and python_version.minor >= 8:
            print(f"‚úÖ Python {python_version.major}.{python_version.minor} OK")
        else:
            errors.append(f"‚ùå Python 3.8+ requis (trouv√© {python_version.major}.{python_version.minor})")
    except Exception as e:
        errors.append(f"‚ùå Erreur v√©rification Python: {e}")
    
    # Test 3: V√©rifier Git
    try:
        result = subprocess.run(['git', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Git disponible")
        else:
            errors.append("‚ùå Git non disponible")
    except FileNotFoundError:
        errors.append("‚ùå Git non install√©")
    
    # Test 4: V√©rifier contextmaker
    try:
        import contextmaker
        if hasattr(contextmaker, 'make'):
            print("‚úÖ contextmaker disponible")
        else:
            errors.append("‚ùå contextmaker.make() non disponible")
    except ImportError:
        errors.append("‚ùå contextmaker non install√©")
    
    # Test 5: V√©rifier les d√©pendances Python
    required_modules = ['requests', 'tqdm', 'schedule']
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} import√©")
        except ImportError:
            errors.append(f"‚ùå Module Python manquant: {module}")
    
    # Test 6: V√©rifier les dossiers n√©cessaires
    required_dirs = [
        "app/data",
        "app/update_bdd", 
        "logs",
        "temp"
    ]
    for dir_path in required_dirs:
        path = Path(dir_path)
        if path.exists():
            print(f"‚úÖ Dossier {dir_path} existe")
        else:
            print(f"‚ö†Ô∏è  Dossier {dir_path} sera cr√©√©")
    
    # Test 7: V√©rifier les fichiers de donn√©es existants
    data_files = [
        "app/data/astronomy-libraries.json",
        "app/update_bdd/ascl_repos_with_stars.csv"
    ]
    for file_path in data_files:
        path = Path(file_path)
        if path.exists():
            print(f"‚úÖ Fichier {file_path} existe")
        else:
            print(f"‚ö†Ô∏è  Fichier {file_path} sera cr√©√© lors de la premi√®re ex√©cution")
    
    return errors

def test_network_connectivity():
    """Teste la connectivit√© r√©seau"""
    print("\nüåê Test de connectivit√© r√©seau...")
    
    import requests
    
    # Test ASCL API
    try:
        response = requests.get("https://ascl.net/code/json", timeout=10)
        if response.status_code == 200:
            print("‚úÖ ASCL API accessible")
        else:
            print(f"‚ö†Ô∏è  ASCL API retourne code {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur acc√®s ASCL API: {e}")
    
    # Test GitHub API
    try:
        response = requests.get("https://api.github.com/repos/astropy/astropy/commits", timeout=10)
        if response.status_code == 200:
            print("‚úÖ GitHub API accessible")
        else:
            print(f"‚ö†Ô∏è  GitHub API retourne code {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur acc√®s GitHub API: {e}")

def test_script_syntax():
    """Teste la syntaxe des scripts"""
    print("\nüìù Test de syntaxe des scripts...")
    
    scripts = [
        "scripts/daily_maintenance.py",
        "scripts/schedule_daily_maintenance.py"
    ]
    
    for script in scripts:
        try:
            # Test de compilation Python
            with open(script, 'r') as f:
                compile(f.read(), script, 'exec')
            print(f"‚úÖ {script} syntaxe OK")
        except SyntaxError as e:
            print(f"‚ùå {script} erreur syntaxe: {e}")
        except FileNotFoundError:
            print(f"‚ùå {script} non trouv√©")

def test_permissions():
    """Teste les permissions des fichiers"""
    print("\nüîí Test des permissions...")
    
    scripts = [
        "scripts/daily_maintenance.py",
        "scripts/schedule_daily_maintenance.py",
        "scripts/setup_maintenance_service.sh"
    ]
    
    for script in scripts:
        path = Path(script)
        if path.exists():
            # V√©rifier si ex√©cutable
            import stat
            mode = path.stat().st_mode
            if mode & stat.S_IXUSR:
                print(f"‚úÖ {script} ex√©cutable")
            else:
                print(f"‚ö†Ô∏è  {script} non ex√©cutable (chmod +x {script})")
        else:
            print(f"‚ùå {script} non trouv√©")

def test_dry_run():
    """Teste l'import du module principal"""
    print("\nüß™ Test d'import du module principal...")
    
    try:
        # Ajouter le r√©pertoire courant au PATH Python
        sys.path.insert(0, str(Path('.').absolute()))
        
        # Importer les classes principales sans ex√©cuter
        from scripts.daily_maintenance import DailyMaintenanceManager
        
        # Cr√©er une instance pour tester l'initialisation
        manager = DailyMaintenanceManager()
        print("‚úÖ Module daily_maintenance import√© avec succ√®s")
        print(f"‚úÖ Chemins configur√©s: {manager.data_dir}, {manager.temp_dir}")
        
    except Exception as e:
        print(f"‚ùå Erreur import module: {e}")

def main():
    """Point d'entr√©e principal du test"""
    print("üöÄ D√âBUT DES TESTS DE MAINTENANCE\n")
    
    # Ex√©cuter tous les tests
    errors = test_prerequisites()
    test_network_connectivity()
    test_script_syntax()
    test_permissions()
    test_dry_run()
    
    # R√©sum√© final
    print("\n" + "="*50)
    print("üìä R√âSUM√â DES TESTS")
    print("="*50)
    
    if errors:
        print("‚ùå ERREURS D√âTECT√âES:")
        for error in errors:
            print(f"  {error}")
        print("\nüîß Corrigez ces erreurs avant d'ex√©cuter la maintenance.")
        return False
    else:
        print("‚úÖ TOUS LES TESTS PASS√âS")
        print("\nüéâ Le syst√®me est pr√™t pour la maintenance quotidienne!")
        print("\nCommandes pour d√©marrer:")
        print("  - Test manuel:       python scripts/daily_maintenance.py")
        print("  - Planificateur:     python scripts/schedule_daily_maintenance.py")
        print("  - Service systemd:   sudo bash scripts/setup_maintenance_service.sh")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
