#!/usr/bin/env python3
"""
Script pour nettoyer l'ancien syst√®me de domaines.
Ce script supprime tous les fichiers obsol√®tes et garde seulement le nouveau syst√®me dynamique.
"""

import shutil
from pathlib import Path
import subprocess

class OldSystemCleaner:
    def __init__(self):
        self.setup_paths()
    
    def setup_paths(self):
        """Configure les chemins depuis la racine du projet"""
        if Path.cwd().name == "templates":
            self.project_root = Path.cwd().parent.parent
        else:
            self.project_root = Path.cwd()
        
        self.chat_dir = self.project_root / "app" / "chat"
        self.leaderboard_dir = self.project_root / "app" / "leaderboard"
        self.ui_dir = self.project_root / "app" / "ui"
    
    def cleanup_old_domain_pages(self):
        """Supprime les anciennes pages de domaines hardcod√©es"""
        print("üßπ Nettoyage des anciennes pages de domaines...")
        
        # Domaines √† conserver (garder les dossiers pour la compatibilit√©)
        domains_to_keep = ['astronomy', 'biochemistry', 'finance', 'machinelearning']
        
        # Supprimer les anciennes pages hardcod√©es
        old_files_to_remove = []
        
        for domain in domains_to_keep:
            # Supprimer les anciens fichiers page.tsx
            chat_page = self.chat_dir / domain / "page.tsx"
            leaderboard_page = self.leaderboard_dir / domain / "page.tsx"
            
            if chat_page.exists():
                old_files_to_remove.append(chat_page)
            if leaderboard_page.exists():
                old_files_to_remove.append(leaderboard_page)
        
        # Supprimer les fichiers
        for file_path in old_files_to_remove:
            try:
                file_path.unlink()
                print(f"‚úÖ Supprim√©: {file_path}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la suppression de {file_path}: {e}")
        
        print(f"üìÅ Gard√© les dossiers de domaines pour la compatibilit√©")
    
    def cleanup_old_ui_components(self):
        """Supprime les anciens composants UI obsol√®tes"""
        print("üßπ Nettoyage des anciens composants UI...")
        
        # Fichiers √† supprimer (obsol√®tes avec le nouveau syst√®me)
        files_to_remove = [
            "base-chat-page.tsx",
            "base-leaderboard-page.tsx"
        ]
        
        for filename in files_to_remove:
            file_path = self.ui_dir / filename
            if file_path.exists():
                try:
                    # Cr√©er une sauvegarde avant suppression
                    backup_path = file_path.with_suffix('.tsx.backup-cleanup')
                    shutil.copy2(file_path, backup_path)
                    print(f"üíæ Sauvegarde cr√©√©e: {backup_path}")
                    
                    file_path.unlink()
                    print(f"‚úÖ Supprim√©: {file_path}")
                except Exception as e:
                    print(f"‚ùå Erreur lors de la suppression de {file_path}: {e}")
            else:
                print(f"‚ö†Ô∏è  Fichier non trouv√©: {file_path}")
    
    def cleanup_empty_directories(self):
        """Supprime les dossiers vides apr√®s nettoyage"""
        print("üßπ V√©rification des dossiers vides...")
        
        # V√©rifier les dossiers de domaines
        for domain_dir in [self.chat_dir, self.leaderboard_dir]:
            for subdir in domain_dir.iterdir():
                if subdir.is_dir() and subdir.name != "[domain]":
                    # Compter les fichiers dans le sous-dossier
                    file_count = len(list(subdir.glob("*.tsx")))
                    if file_count == 0:
                        print(f"üìÅ Dossier vide d√©tect√©: {subdir}")
                        print(f"   (gard√© pour la compatibilit√© avec le nouveau syst√®me)")
    
    def verify_new_system(self):
        """V√©rifie que le nouveau syst√®me est en place"""
        print("üîç V√©rification du nouveau syst√®me...")
        
        # V√©rifier les fichiers essentiels du nouveau syst√®me
        essential_files = [
            self.chat_dir / "[domain]" / "page.tsx",
            self.leaderboard_dir / "[domain]" / "page.tsx",
            self.ui_dir / "chat-template.tsx",
            self.ui_dir / "leaderboard-template.tsx",
            self.ui_dir / "domain-navigator.tsx"
        ]
        
        all_good = True
        for file_path in essential_files:
            if file_path.exists():
                print(f"‚úÖ {file_path.name} - OK")
            else:
                print(f"‚ùå {file_path.name} - MANQUANT")
                all_good = False
        
        if all_good:
            print("üéâ Nouveau syst√®me v√©rifi√© et fonctionnel!")
        else:
            print("‚ö†Ô∏è  Certains fichiers du nouveau syst√®me sont manquants!")
        
        return all_good
    
    def regenerate_routes(self):
        """R√©g√©n√®re les routes pour s'assurer que tout est √† jour"""
        print("üõ£Ô∏è  R√©g√©n√©ration des routes...")
        try:
            script_path = Path(__file__).parent / "generate-domain-routes.py"
            result = subprocess.run(
                ["python3", str(script_path)],
                capture_output=True,
                text=True,
                cwd=Path(__file__).parent
            )
            
            if result.returncode == 0:
                print("‚úÖ Routes r√©g√©n√©r√©es avec succ√®s")
            else:
                print(f"‚ö†Ô∏è  R√©g√©n√©ration des routes termin√©e avec des avertissements")
                if result.stderr:
                    print(f"Erreurs: {result.stderr}")
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©g√©n√©ration des routes: {e}")
    
    def run_cleanup(self):
        """Ex√©cute le nettoyage complet"""
        print("üöÄ D√©but du nettoyage de l'ancien syst√®me...")
        print("=" * 50)
        
        # 1. Nettoyer les anciennes pages
        self.cleanup_old_domain_pages()
        print()
        
        # 2. Nettoyer les anciens composants UI
        self.cleanup_old_ui_components()
        print()
        
        # 3. V√©rifier les dossiers vides
        self.cleanup_empty_directories()
        print()
        
        # 4. V√©rifier le nouveau syst√®me
        if self.verify_new_system():
            print()
            # 5. R√©g√©n√©rer les routes
            self.regenerate_routes()
        
        print("=" * 50)
        print("üéâ Nettoyage termin√©!")
        print("\nüìã R√©sum√© des actions:")
        print("   ‚úÖ Anciennes pages de domaines supprim√©es")
        print("   ‚úÖ Anciens composants UI supprim√©s")
        print("   ‚úÖ Sauvegardes cr√©√©es avant suppression")
        print("   ‚úÖ Nouveau syst√®me v√©rifi√©")
        print("   ‚úÖ Routes r√©g√©n√©r√©es")

def main():
    """Fonction principale"""
    try:
        cleaner = OldSystemCleaner()
        
        # Demander confirmation
        print("‚ö†Ô∏è  ATTENTION: Ce script va supprimer des fichiers de l'ancien syst√®me!")
        print("   - base-chat-page.tsx")
        print("   - base-leaderboard-page.tsx")
        print("   - Anciennes pages de domaines hardcod√©es")
        print("   - Des sauvegardes seront cr√©√©es")
        
        response = input("\n√ätes-vous s√ªr de vouloir continuer ? (oui/NON): ")
        if response.lower() not in ['oui', 'o', 'yes', 'y']:
            print("‚ùå Nettoyage annul√©")
            return
        
        cleaner.run_cleanup()
        
    except KeyboardInterrupt:
        print("\n‚ùå Nettoyage annul√© par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")

if __name__ == "__main__":
    main()
