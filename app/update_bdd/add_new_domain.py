#!/usr/bin/env python3
"""
Script pour ajouter facilement un nouveau domaine au syst√®me.
Utilise les mod√®les pr√©d√©finis et permet la personnalisation.
"""

import sys
import json
from pathlib import Path
import argparse

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent))

from domain_templates import (
    DOMAIN_TEMPLATES, 
    get_template, 
    create_custom_domain, 
    validate_domain_config
)
from update_all_domains import DOMAIN_CONFIGS

def show_existing_domains():
    """Affiche les domaines existants"""
    print("üåê DOMAINES EXISTANTS:")
    print("=" * 40)
    for domain in DOMAIN_CONFIGS.keys():
        print(f"   - {domain}")
    print(f"\nTotal: {len(DOMAIN_CONFIGS)} domaines")

def show_available_templates():
    """Affiche les mod√®les disponibles"""
    print("üìö MOD√àLES DISPONIBLES:")
    print("=" * 40)
    for template in DOMAIN_TEMPLATES.keys():
        print(f"   - {template}")
    print(f"\nTotal: {len(DOMAIN_TEMPLATES)} mod√®les")

def add_domain_from_template(template_name: str, custom_name: str = None):
    """Ajoute un domaine en utilisant un mod√®le"""
    if template_name not in DOMAIN_TEMPLATES:
        print(f"‚ùå Mod√®le '{template_name}' non trouv√©")
        return False
    
    # Utiliser le nom du mod√®le si aucun nom personnalis√© n'est fourni
    domain_name = custom_name or template_name
    
    if domain_name in DOMAIN_CONFIGS:
        print(f"‚ùå Le domaine '{domain_name}' existe d√©j√†")
        return False
    
    # R√©cup√©rer le mod√®le
    template = DOMAIN_TEMPLATES[template_name]
    
    # Cr√©er la configuration du domaine
    domain_config = {
        "use_ascl": template["use_ascl"],
        "keywords": template["keywords"].copy(),
        "description": template["description"],
        "specific_libs": template["specific_libs"].copy()
    }
    
    # Ajouter au syst√®me
    DOMAIN_CONFIGS[domain_name] = domain_config
    
    print(f"‚úÖ Domaine '{domain_name}' ajout√© avec succ√®s!")
    print(f"   - Bas√© sur le mod√®le: {template_name}")
    print(f"   - Mots-cl√©s: {len(domain_config['keywords'])}")
    print(f"   - Utilise ASCL: {domain_config['use_ascl']}")
    
    return True

def add_custom_domain(
    name: str, 
    keywords: list, 
    description: str, 
    specific_libs: list = None,
    use_ascl: bool = False
):
    """Ajoute un domaine personnalis√©"""
    if name in DOMAIN_CONFIGS:
        print(f"‚ùå Le domaine '{name}' existe d√©j√†")
        return False
    
    # Cr√©er la configuration
    domain_config = create_custom_domain(name, keywords, description, specific_libs, use_ascl)
    
    # Valider la configuration
    is_valid, errors = validate_domain_config(domain_config)
    if not is_valid:
        print("‚ùå Configuration invalide:")
        for error in errors:
            print(f"   - {error}")
        return False
    
    # Ajouter au syst√®me
    DOMAIN_CONFIGS[name] = domain_config
    
    print(f"‚úÖ Domaine personnalis√© '{name}' ajout√© avec succ√®s!")
    print(f"   - Mots-cl√©s: {len(keywords)}")
    print(f"   - Utilise ASCL: {use_ascl}")
    
    return True

def save_domain_configs():
    """Sauvegarde la configuration des domaines dans un fichier"""
    config_file = Path(__file__).parent / "domain_configs_backup.json"
    
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(DOMAIN_CONFIGS, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Configuration sauvegard√©e dans: {config_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")
        return False

def interactive_add_domain():
    """Ajoute un domaine de mani√®re interactive"""
    print("üéØ AJOUT INTERACTIF D'UN DOMAINE")
    print("=" * 50)
    
    # Demander le nom du domaine
    domain_name = input("Nom du domaine (ex: web_development): ").strip()
    if not domain_name:
        print("‚ùå Nom de domaine requis")
        return False
    
    if domain_name in DOMAIN_CONFIGS:
        print(f"‚ùå Le domaine '{domain_name}' existe d√©j√†")
        return False
    
    # Choisir entre mod√®le et personnalis√©
    print("\nChoisir l'approche:")
    print("1. Utiliser un mod√®le existant")
    print("2. Cr√©er un domaine personnalis√©")
    
    choice = input("Votre choix (1 ou 2): ").strip()
    
    if choice == "1":
        # Utiliser un mod√®le
        show_available_templates()
        template_name = input("Nom du mod√®le √† utiliser: ").strip()
        
        if template_name in DOMAIN_TEMPLATES:
            return add_domain_from_template(template_name, domain_name)
        else:
            print(f"‚ùå Mod√®le '{template_name}' non trouv√©")
            return False
    
    elif choice == "2":
        # Cr√©er un domaine personnalis√©
        print("\nConfiguration du domaine personnalis√©:")
        
        # Mots-cl√©s
        keywords_input = input("Mots-cl√©s (s√©par√©s par des virgules): ").strip()
        keywords = [k.strip() for k in keywords_input.split(",") if k.strip()]
        
        if not keywords:
            print("‚ùå Au moins un mot-cl√© est requis")
            return False
        
        # Description
        description = input("Description du domaine: ").strip()
        if not description:
            print("‚ùå Description requise")
            return False
        
        # Librairies sp√©cifiques
        specific_libs_input = input("Librairies sp√©cifiques (s√©par√©es par des virgules, optionnel): ").strip()
        specific_libs = [lib.strip() for lib in specific_libs_input.split(",") if lib.strip()]
        
        # Utiliser ASCL
        use_ascl_input = input("Utiliser ASCL ? (y/n, d√©faut: n): ").strip().lower()
        use_ascl = use_ascl_input in ['y', 'yes', 'oui', 'o']
        
        return add_custom_domain(domain_name, keywords, description, specific_libs, use_ascl)
    
    else:
        print("‚ùå Choix invalide")
        return False

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(
        description="Ajouter un nouveau domaine au syst√®me",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python3 add_new_domain.py --list                    # Lister les domaines existants
  python3 add_new_domain.py --templates               # Lister les mod√®les disponibles
  python3 add_new_domain.py --template web_dev        # Ajouter depuis un mod√®le
  python3 add_new_domain.py --custom                  # Ajouter un domaine personnalis√©
  python3 add_new_domain.py --interactive             # Mode interactif
        """
    )
    
    parser.add_argument("--list", action="store_true", help="Lister les domaines existants")
    parser.add_argument("--templates", action="store_true", help="Lister les mod√®les disponibles")
    parser.add_argument("--template", help="Ajouter un domaine depuis un mod√®le")
    parser.add_argument("--custom", action="store_true", help="Ajouter un domaine personnalis√©")
    parser.add_argument("--interactive", action="store_true", help="Mode interactif")
    parser.add_argument("--save", action="store_true", help="Sauvegarder la configuration")
    
    args = parser.parse_args()
    
    if args.list:
        show_existing_domains()
        return
    
    if args.templates:
        show_available_templates()
        return
    
    if args.template:
        success = add_domain_from_template(args.template)
        if success and args.save:
            save_domain_configs()
        return
    
    if args.custom:
        print("üéØ AJOUT D'UN DOMAINE PERSONNALIS√â")
        print("=" * 50)
        
        domain_name = input("Nom du domaine: ").strip()
        keywords_input = input("Mots-cl√©s (s√©par√©s par des virgules): ").strip()
        description = input("Description: ").strip()
        
        keywords = [k.strip() for k in keywords_input.split(",") if k.strip()]
        
        success = add_custom_domain(domain_name, keywords, description)
        if success and args.save:
            save_domain_configs()
        return
    
    if args.interactive:
        success = interactive_add_domain()
        if success and args.save:
            save_domain_configs()
        return
    
    if args.save:
        save_domain_configs()
        return
    
    # Aucun argument fourni, afficher l'aide
    parser.print_help()

if __name__ == "__main__":
    main()
